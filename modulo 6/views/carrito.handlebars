
<div class="position-relative m-4">
  <div class="progress" role="progressbar" aria-label="Progress" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="height: 1px;">
    <div class="progress-bar" style="width: 50%"></div>
  </div>
  <button type="button" class="position-absolute top-0 start-0 translate-middle btn btn-sm btn-primary rounded-pill" style="width: 2rem; height:2rem;">1</button>
  <button type="button" class="position-absolute top-0 start-50 translate-middle btn btn-sm btn-primary rounded-pill" style="width: 2rem; height:2rem;">2</button>
  <button type="button" class="position-absolute top-0 start-100 translate-middle btn btn-sm btn-secondary rounded-pill" style="width: 2rem; height:2rem;">3</button>
</div>
<br>
<br>
<section>
   <div class="bg-success p-2" style="--bs-bg-opacity: .5;"><center><b> Productos en el carrito de compras</center></b></div>
   
   <br>

   </div>

  <table class="table table-striped">
    <thead>
      <tr class="table-success">
        <th scope="col">ID</th>
        <th scope="col">Nombre</th>
        <th scope="col">Precio</th>
        <th scope="col">Cantidad deseada</th>
        <th scope="col">Stock disponible</th>
        <th scope="col">Subtotal</th>
      </tr>
    </thead>
    <tbody id="cuerpoTabla">

    </tbody>
  </table>
  <center><button class="btn btn-success"  id="btnComprar">Realizar Compra</button></center>
</section>




<script>
    //agregamos clase active al link de la página concurrida
        document.querySelector("#linkCarrito").classList.add("active")

        //FUNCIÓN QUE PERMITE CARGAR LOS PRODUCTOS.
    const cargarTabla = (productos) => {
        cuerpoTabla.innerHTML = "";

        let acumuladorFilas= "";
        productos.forEach(producto => {
            let template = `
                <tr>
                    <th scope="row">${producto.id}</th>
                    <td>${producto.nombre}</td>
                    <td>${producto.precio}</td>
                    <td><input type="number" name="cantidad" value="${producto.cantidad}" onchange="modificarCantidad(this.value, '${producto.id}')" min="0" max="${producto.stock}"></td>
                    <td>${producto.stock}</td>
                    <td>${producto.subtotal}</td>
                </tr>
                `
            acumuladorFilas+= template;
            console.log(('${producto.id}'));
        })


        let total = productos.reduce(
                    (accumulator, currentValue) => accumulator + (currentValue.cantidad * currentValue.precio), 0
                  
                    );

               let total2 = productos.reduce(
                    (accumulator, currentValue) => accumulator + (currentValue.cantidad), 0
                  
                    );

                  document.querySelector("#cantidad-productos").innerText = total2; 
                    

 

        acumuladorFilas+= `
                <tr>
                    <tr> <td colspan="6" class="text-end fs-2">Total a pagar: ${total}</td></tr>
                </tr>`
        cuerpoTabla.innerHTML = acumuladorFilas;
        
       
    }
 
//FUNCIÓN QUE PERMITE CORROBORAR LA CANTIDAD DE PRODUCTOS QUE SE QUIEREN COMPRAR EM COMPARACIÓN A LOS PRODUCTOS DEL SERVIDOR.
        const calcularProductos= async () => {
            try{
                
                let storageCarro = JSON.parse(localStorage.getItem("productos")) || [];

                let productosIds = [];

                if(storageCarro.length > 0){
                    storageCarro.forEach((producto) => {
                    productosIds.push(producto.id)
                })
                let stringIds = productosIds.join(",");
                let urlPeticion = "http://localhost:3000/api/productos/filter/"+ stringIds
                let response = await fetch(urlPeticion);
                let data = await response.json();

                let productosCargar = [];
                storageCarro.forEach((productoCarro) => {
                    let producto = data.find(element => element.id == productoCarro.id)
                    producto.cantidad = productoCarro.cantidad;
                    producto.subtotal = (producto.cantidad * producto.precio)
                    productosCargar.push(producto);
                })

                cargarTabla(productosCargar);
                }else {
                    cuerpoTabla.innerHTML = "";
                    cuerpoTabla.innerHTML = `<tr> <td colspan="6" class="text-center">NO HAY PRODUCTOS EN EL CARRITO</td></tr>`;
                }

            }catch(error){
                localStorage.setItem("productos", "[]")
                location.reload();
            }

        }

        calcularProductos();

        //FUNCIÓN QUE PERMITA MODIFICAR LA CANTIDAD DE PRODUCTOS A COMPRAR

        const modificarCantidad = (cantidad, productoId) => {
            let storageCarro = JSON.parse(localStorage.getItem("productos")) || []
            
             storageCarro = storageCarro.map(producto => {
                if(producto.id == productoId){
                    producto.cantidad = cantidad;
                }
                return producto
             }).filter(producto => producto.cantidad >0)
            localStorage.setItem("productos", JSON.stringify(storageCarro))
           
            calcularProductos();

        }


//ENVIAR LOS PRODUCTOS COMPRADOS AL BACKEND
        btnComprar.addEventListener("click", (event) => {
            let storageCarro = JSON.parse(localStorage.getItem("productos")) || [];

            if(storageCarro.length> 0){
                const myHeaders = new Headers();
                myHeaders.append("Content-Type", "application/json");

                fetch("http://localhost:3000/api/ventas", {
                    method: "POST",
                    headers: myHeaders,
                    body: JSON.stringify(storageCarro)
                })
                .then(response => response.json())
                .then(data => {
                    if(data.code == 500 || data.code == 400){
                        alert(data.message)
                    }else{
                        alert("Venta: " + data.message)
                        localStorage.setItem("productos", "[]");
                        location.reload();
                    }
                })
                .catch(error => {
                    console.log(error)
                    alert("Algo ha salido mal al cargar los productos.")
                })
            }else {
                alert("No existen productos agregos al carrito.")
            }
        })
        






</script>